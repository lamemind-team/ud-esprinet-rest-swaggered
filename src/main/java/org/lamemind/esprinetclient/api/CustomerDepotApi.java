/*
 * Esprinet Customer Rest Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: dl-ws-integration@esprinet.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.lamemind.esprinetclient.api;

import org.lamemind.esprinetclient.invoker.ApiCallback;
import org.lamemind.esprinetclient.invoker.ApiClient;
import org.lamemind.esprinetclient.invoker.ApiException;
import org.lamemind.esprinetclient.invoker.ApiResponse;
import org.lamemind.esprinetclient.invoker.Configuration;
import org.lamemind.esprinetclient.invoker.Pair;
import org.lamemind.esprinetclient.invoker.ProgressRequestBody;
import org.lamemind.esprinetclient.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.lamemind.esprinetclient.model.CustomerDepotDeliveryNoteOutput;
import org.lamemind.esprinetclient.model.CustomerDepotDeliveryNotesOutput;
import org.lamemind.esprinetclient.model.CustomerDepotOrderInput;
import org.lamemind.esprinetclient.model.CustomerDepotOrderInsertOutput;
import org.lamemind.esprinetclient.model.CustomerDepotOrderOutput;
import org.lamemind.esprinetclient.model.CustomerDepotOrdersOutput;
import org.lamemind.esprinetclient.model.CustomerDepotProductOutput;
import org.lamemind.esprinetclient.model.CustomerDepotProductsOutput;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerDepotApi {
    private ApiClient apiClient;

    public CustomerDepotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerDepotApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for customerDepotDeliveryNotesGetById
     * @param id the delivery note id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerDepotDeliveryNotesGetByIdCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerDepot/deliverynotes/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerDepotDeliveryNotesGetByIdValidateBeforeCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerDepotDeliveryNotesGetById(Async)");
        }
        

        com.squareup.okhttp.Call call = customerDepotDeliveryNotesGetByIdCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the customer depot delivery note by Id
     * 
     * @param id the delivery note id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return CustomerDepotDeliveryNoteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDepotDeliveryNoteOutput customerDepotDeliveryNotesGetById(String id, String xConsumerTransactionId) throws ApiException {
        ApiResponse<CustomerDepotDeliveryNoteOutput> resp = customerDepotDeliveryNotesGetByIdWithHttpInfo(id, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Get the customer depot delivery note by Id
     * 
     * @param id the delivery note id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;CustomerDepotDeliveryNoteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDepotDeliveryNoteOutput> customerDepotDeliveryNotesGetByIdWithHttpInfo(String id, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = customerDepotDeliveryNotesGetByIdValidateBeforeCall(id, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<CustomerDepotDeliveryNoteOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the customer depot delivery note by Id (asynchronously)
     * 
     * @param id the delivery note id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerDepotDeliveryNotesGetByIdAsync(String id, String xConsumerTransactionId, final ApiCallback<CustomerDepotDeliveryNoteOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerDepotDeliveryNotesGetByIdValidateBeforeCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDepotDeliveryNoteOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerDepotDeliveryNotesSearch
     * @param fromDate Filter from date (optional)
     * @param toDate Filter to date (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerDepotDeliveryNotesSearchCall(OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerDepot/deliverynotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromDate", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toDate", toDate));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (currentPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currentPage", currentPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerDepotDeliveryNotesSearchValidateBeforeCall(OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = customerDepotDeliveryNotesSearchCall(fromDate, toDate, filter, currentPage, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all delivery notes of the customer depot
     * 
     * @param fromDate Filter from date (optional)
     * @param toDate Filter to date (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return CustomerDepotDeliveryNotesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDepotDeliveryNotesOutput customerDepotDeliveryNotesSearch(OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId) throws ApiException {
        ApiResponse<CustomerDepotDeliveryNotesOutput> resp = customerDepotDeliveryNotesSearchWithHttpInfo(fromDate, toDate, filter, currentPage, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Get all delivery notes of the customer depot
     * 
     * @param fromDate Filter from date (optional)
     * @param toDate Filter to date (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;CustomerDepotDeliveryNotesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDepotDeliveryNotesOutput> customerDepotDeliveryNotesSearchWithHttpInfo(OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = customerDepotDeliveryNotesSearchValidateBeforeCall(fromDate, toDate, filter, currentPage, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<CustomerDepotDeliveryNotesOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all delivery notes of the customer depot (asynchronously)
     * 
     * @param fromDate Filter from date (optional)
     * @param toDate Filter to date (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerDepotDeliveryNotesSearchAsync(OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId, final ApiCallback<CustomerDepotDeliveryNotesOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerDepotDeliveryNotesSearchValidateBeforeCall(fromDate, toDate, filter, currentPage, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDepotDeliveryNotesOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerDepotOrdersGetById
     * @param id The order Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerDepotOrdersGetByIdCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerDepot/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerDepotOrdersGetByIdValidateBeforeCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerDepotOrdersGetById(Async)");
        }
        

        com.squareup.okhttp.Call call = customerDepotOrdersGetByIdCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the customer depot order by Id
     * 
     * @param id The order Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return CustomerDepotOrderOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDepotOrderOutput customerDepotOrdersGetById(String id, String xConsumerTransactionId) throws ApiException {
        ApiResponse<CustomerDepotOrderOutput> resp = customerDepotOrdersGetByIdWithHttpInfo(id, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Get the customer depot order by Id
     * 
     * @param id The order Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;CustomerDepotOrderOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDepotOrderOutput> customerDepotOrdersGetByIdWithHttpInfo(String id, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = customerDepotOrdersGetByIdValidateBeforeCall(id, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<CustomerDepotOrderOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the customer depot order by Id (asynchronously)
     * 
     * @param id The order Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerDepotOrdersGetByIdAsync(String id, String xConsumerTransactionId, final ApiCallback<CustomerDepotOrderOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerDepotOrdersGetByIdValidateBeforeCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDepotOrderOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerDepotOrdersSearch
     * @param customerOrderId The customer order Id (optional)
     * @param fromDate Filter from date (optional)
     * @param toDate Filter to date (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerDepotOrdersSearchCall(String customerOrderId, OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerDepot/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customerOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customerOrderId", customerOrderId));
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromDate", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toDate", toDate));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (currentPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currentPage", currentPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerDepotOrdersSearchValidateBeforeCall(String customerOrderId, OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = customerDepotOrdersSearchCall(customerOrderId, fromDate, toDate, filter, currentPage, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all orders of the customer depot.
     * 
     * @param customerOrderId The customer order Id (optional)
     * @param fromDate Filter from date (optional)
     * @param toDate Filter to date (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return CustomerDepotOrdersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDepotOrdersOutput customerDepotOrdersSearch(String customerOrderId, OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId) throws ApiException {
        ApiResponse<CustomerDepotOrdersOutput> resp = customerDepotOrdersSearchWithHttpInfo(customerOrderId, fromDate, toDate, filter, currentPage, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Get all orders of the customer depot.
     * 
     * @param customerOrderId The customer order Id (optional)
     * @param fromDate Filter from date (optional)
     * @param toDate Filter to date (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;CustomerDepotOrdersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDepotOrdersOutput> customerDepotOrdersSearchWithHttpInfo(String customerOrderId, OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = customerDepotOrdersSearchValidateBeforeCall(customerOrderId, fromDate, toDate, filter, currentPage, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<CustomerDepotOrdersOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all orders of the customer depot. (asynchronously)
     * 
     * @param customerOrderId The customer order Id (optional)
     * @param fromDate Filter from date (optional)
     * @param toDate Filter to date (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerDepotOrdersSearchAsync(String customerOrderId, OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId, final ApiCallback<CustomerDepotOrdersOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerDepotOrdersSearchValidateBeforeCall(customerOrderId, fromDate, toDate, filter, currentPage, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDepotOrdersOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerDepotProductsGetById
     * @param id The product Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerDepotProductsGetByIdCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerDepot/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerDepotProductsGetByIdValidateBeforeCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerDepotProductsGetById(Async)");
        }
        

        com.squareup.okhttp.Call call = customerDepotProductsGetByIdCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the product of the customer with the given product Id stored in the Esprinet depot
     * 
     * @param id The product Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return CustomerDepotProductOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDepotProductOutput customerDepotProductsGetById(String id, String xConsumerTransactionId) throws ApiException {
        ApiResponse<CustomerDepotProductOutput> resp = customerDepotProductsGetByIdWithHttpInfo(id, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Get the product of the customer with the given product Id stored in the Esprinet depot
     * 
     * @param id The product Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;CustomerDepotProductOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDepotProductOutput> customerDepotProductsGetByIdWithHttpInfo(String id, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = customerDepotProductsGetByIdValidateBeforeCall(id, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<CustomerDepotProductOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the product of the customer with the given product Id stored in the Esprinet depot (asynchronously)
     * 
     * @param id The product Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerDepotProductsGetByIdAsync(String id, String xConsumerTransactionId, final ApiCallback<CustomerDepotProductOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerDepotProductsGetByIdValidateBeforeCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDepotProductOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerDepotProductsGetByPage
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerDepotProductsGetByPageCall(Integer currentPage, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerDepot/products/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currentPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currentPage", currentPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerDepotProductsGetByPageValidateBeforeCall(Integer currentPage, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = customerDepotProductsGetByPageCall(currentPage, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all products of the customer stored in the Esprinet depot
     * 
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return CustomerDepotProductsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDepotProductsOutput customerDepotProductsGetByPage(Integer currentPage, String xConsumerTransactionId) throws ApiException {
        ApiResponse<CustomerDepotProductsOutput> resp = customerDepotProductsGetByPageWithHttpInfo(currentPage, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Get all products of the customer stored in the Esprinet depot
     * 
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;CustomerDepotProductsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDepotProductsOutput> customerDepotProductsGetByPageWithHttpInfo(Integer currentPage, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = customerDepotProductsGetByPageValidateBeforeCall(currentPage, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<CustomerDepotProductsOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all products of the customer stored in the Esprinet depot (asynchronously)
     * 
     * @param currentPage The current page (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerDepotProductsGetByPageAsync(Integer currentPage, String xConsumerTransactionId, final ApiCallback<CustomerDepotProductsOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerDepotProductsGetByPageValidateBeforeCall(currentPage, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDepotProductsOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerDepotProductsSearch
     * @param esprinetProductCode The esprinet product code (optional)
     * @param customerProductCode The customer product code (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerDepotProductsSearchCall(String esprinetProductCode, String customerProductCode, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerDepot/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (esprinetProductCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("esprinetProductCode", esprinetProductCode));
        if (customerProductCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customerProductCode", customerProductCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerDepotProductsSearchValidateBeforeCall(String esprinetProductCode, String customerProductCode, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = customerDepotProductsSearchCall(esprinetProductCode, customerProductCode, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the product of the customer with the given customer or esprinet product Id stored in the Esprinet depot
     * 
     * @param esprinetProductCode The esprinet product code (optional)
     * @param customerProductCode The customer product code (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return CustomerDepotProductOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDepotProductOutput customerDepotProductsSearch(String esprinetProductCode, String customerProductCode, String xConsumerTransactionId) throws ApiException {
        ApiResponse<CustomerDepotProductOutput> resp = customerDepotProductsSearchWithHttpInfo(esprinetProductCode, customerProductCode, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Get the product of the customer with the given customer or esprinet product Id stored in the Esprinet depot
     * 
     * @param esprinetProductCode The esprinet product code (optional)
     * @param customerProductCode The customer product code (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;CustomerDepotProductOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDepotProductOutput> customerDepotProductsSearchWithHttpInfo(String esprinetProductCode, String customerProductCode, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = customerDepotProductsSearchValidateBeforeCall(esprinetProductCode, customerProductCode, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<CustomerDepotProductOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the product of the customer with the given customer or esprinet product Id stored in the Esprinet depot (asynchronously)
     * 
     * @param esprinetProductCode The esprinet product code (optional)
     * @param customerProductCode The customer product code (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerDepotProductsSearchAsync(String esprinetProductCode, String customerProductCode, String xConsumerTransactionId, final ApiCallback<CustomerDepotProductOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerDepotProductsSearchValidateBeforeCall(esprinetProductCode, customerProductCode, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDepotProductOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ordersPost
     * @param orderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ordersPostCall(CustomerDepotOrderInput orderInput, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = orderInput;

        // create path and map variables
        String localVarPath = "/customerDepot/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ordersPostValidateBeforeCall(CustomerDepotOrderInput orderInput, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderInput' is set
        if (orderInput == null) {
            throw new ApiException("Missing the required parameter 'orderInput' when calling ordersPost(Async)");
        }
        

        com.squareup.okhttp.Call call = ordersPostCall(orderInput, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new order containing the specified list of products into the Esprinet systems.
     * 
     * @param orderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return CustomerDepotOrderInsertOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDepotOrderInsertOutput ordersPost(CustomerDepotOrderInput orderInput, String xConsumerTransactionId) throws ApiException {
        ApiResponse<CustomerDepotOrderInsertOutput> resp = ordersPostWithHttpInfo(orderInput, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Creates a new order containing the specified list of products into the Esprinet systems.
     * 
     * @param orderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;CustomerDepotOrderInsertOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDepotOrderInsertOutput> ordersPostWithHttpInfo(CustomerDepotOrderInput orderInput, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = ordersPostValidateBeforeCall(orderInput, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<CustomerDepotOrderInsertOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new order containing the specified list of products into the Esprinet systems. (asynchronously)
     * 
     * @param orderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ordersPostAsync(CustomerDepotOrderInput orderInput, String xConsumerTransactionId, final ApiCallback<CustomerDepotOrderInsertOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ordersPostValidateBeforeCall(orderInput, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDepotOrderInsertOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
