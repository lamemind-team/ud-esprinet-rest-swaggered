/*
 * Esprinet Customer Rest Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: dl-ws-integration@esprinet.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.lamemind.esprinetclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.lamemind.esprinetclient.model.OperationResult;
import org.threeten.bp.OffsetDateTime;

/**
 * LoginOutput
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-12-17T15:47:59.649+01:00")
public class LoginOutput {
  @SerializedName("expiresUtc")
  private OffsetDateTime expiresUtc = null;

  @SerializedName("authenticationToken")
  private String authenticationToken = null;

  @SerializedName("operationResult")
  private OperationResult operationResult = null;

  public LoginOutput expiresUtc(OffsetDateTime expiresUtc) {
    this.expiresUtc = expiresUtc;
    return this;
  }

   /**
   * Gets or sets the expires UTC.
   * @return expiresUtc
  **/
  @ApiModelProperty(value = "Gets or sets the expires UTC.")
  public OffsetDateTime getExpiresUtc() {
    return expiresUtc;
  }

  public void setExpiresUtc(OffsetDateTime expiresUtc) {
    this.expiresUtc = expiresUtc;
  }

  public LoginOutput authenticationToken(String authenticationToken) {
    this.authenticationToken = authenticationToken;
    return this;
  }

   /**
   * The token which can be used to access all of the web service methods.
   * @return authenticationToken
  **/
  @ApiModelProperty(value = "The token which can be used to access all of the web service methods.")
  public String getAuthenticationToken() {
    return authenticationToken;
  }

  public void setAuthenticationToken(String authenticationToken) {
    this.authenticationToken = authenticationToken;
  }

  public LoginOutput operationResult(OperationResult operationResult) {
    this.operationResult = operationResult;
    return this;
  }

   /**
   * Contains information about the result of this service call.
   * @return operationResult
  **/
  @ApiModelProperty(required = true, value = "Contains information about the result of this service call.")
  public OperationResult getOperationResult() {
    return operationResult;
  }

  public void setOperationResult(OperationResult operationResult) {
    this.operationResult = operationResult;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginOutput loginOutput = (LoginOutput) o;
    return Objects.equals(this.expiresUtc, loginOutput.expiresUtc) &&
        Objects.equals(this.authenticationToken, loginOutput.authenticationToken) &&
        Objects.equals(this.operationResult, loginOutput.operationResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiresUtc, authenticationToken, operationResult);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginOutput {\n");
    
    sb.append("    expiresUtc: ").append(toIndentedString(expiresUtc)).append("\n");
    sb.append("    authenticationToken: ").append(toIndentedString(authenticationToken)).append("\n");
    sb.append("    operationResult: ").append(toIndentedString(operationResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

