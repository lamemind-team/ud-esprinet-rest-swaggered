/*
 * Esprinet Customer Rest Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * Contact: dl-ws-integration@esprinet.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.GetOrderInfoOutput;
import io.swagger.client.model.InsertOrderInput;
import io.swagger.client.model.InsertOrderOutput;
import io.swagger.client.model.ModifyOrderInput;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.OrderTransactionIdOutput;
import io.swagger.client.model.OrderTransactionOutput;
import io.swagger.client.model.OrdersSummaryOutput;
import io.swagger.client.model.SearchOrdersOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient apiClient;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for orderDelete
     * @param id order Id (document number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderDeleteCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderDeleteValidateBeforeCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = orderDeleteCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the order with the given id
     * 
     * @param id order Id (document number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return OrderTransactionIdOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderTransactionIdOutput orderDelete(String id, String xConsumerTransactionId) throws ApiException {
        ApiResponse<OrderTransactionIdOutput> resp = orderDeleteWithHttpInfo(id, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Delete the order with the given id
     * 
     * @param id order Id (document number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;OrderTransactionIdOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderTransactionIdOutput> orderDeleteWithHttpInfo(String id, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = orderDeleteValidateBeforeCall(id, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<OrderTransactionIdOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the order with the given id (asynchronously)
     * 
     * @param id order Id (document number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderDeleteAsync(String id, String xConsumerTransactionId, final ApiCallback<OrderTransactionIdOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderDeleteValidateBeforeCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderTransactionIdOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderGet
     * @param id The complete order Id (type and number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderGetCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderGetValidateBeforeCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderGet(Async)");
        }
        

        com.squareup.okhttp.Call call = orderGetCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an Order by the Order Id
     * 
     * @param id The complete order Id (type and number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return GetOrderInfoOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetOrderInfoOutput orderGet(String id, String xConsumerTransactionId) throws ApiException {
        ApiResponse<GetOrderInfoOutput> resp = orderGetWithHttpInfo(id, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Get an Order by the Order Id
     * 
     * @param id The complete order Id (type and number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;GetOrderInfoOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetOrderInfoOutput> orderGetWithHttpInfo(String id, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = orderGetValidateBeforeCall(id, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<GetOrderInfoOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Order by the Order Id (asynchronously)
     * 
     * @param id The complete order Id (type and number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderGetAsync(String id, String xConsumerTransactionId, final ApiCallback<GetOrderInfoOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderGetValidateBeforeCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOrderInfoOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderLinesDelete
     * @param orderId order Id (document number) (required)
     * @param orderLineId order line Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderLinesDeleteCall(String orderId, Integer orderLineId, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{orderId}/lines/{orderLineId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderLineId" + "\\}", apiClient.escapeString(orderLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderLinesDeleteValidateBeforeCall(String orderId, Integer orderLineId, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderLinesDelete(Async)");
        }
        
        // verify the required parameter 'orderLineId' is set
        if (orderLineId == null) {
            throw new ApiException("Missing the required parameter 'orderLineId' when calling orderLinesDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = orderLinesDeleteCall(orderId, orderLineId, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the order line with the given order line id of the given order
     * 
     * @param orderId order Id (document number) (required)
     * @param orderLineId order line Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return OrderTransactionIdOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderTransactionIdOutput orderLinesDelete(String orderId, Integer orderLineId, String xConsumerTransactionId) throws ApiException {
        ApiResponse<OrderTransactionIdOutput> resp = orderLinesDeleteWithHttpInfo(orderId, orderLineId, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Delete the order line with the given order line id of the given order
     * 
     * @param orderId order Id (document number) (required)
     * @param orderLineId order line Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;OrderTransactionIdOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderTransactionIdOutput> orderLinesDeleteWithHttpInfo(String orderId, Integer orderLineId, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = orderLinesDeleteValidateBeforeCall(orderId, orderLineId, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<OrderTransactionIdOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the order line with the given order line id of the given order (asynchronously)
     * 
     * @param orderId order Id (document number) (required)
     * @param orderLineId order line Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderLinesDeleteAsync(String orderId, Integer orderLineId, String xConsumerTransactionId, final ApiCallback<OrderTransactionIdOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderLinesDeleteValidateBeforeCall(orderId, orderLineId, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderTransactionIdOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderPatch
     * @param id order Id (document number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderPatchCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderPatchValidateBeforeCall(String id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderPatch(Async)");
        }
        

        com.squareup.okhttp.Call call = orderPatchCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unlock the order with the given id
     * 
     * @param id order Id (document number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return OrderTransactionIdOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderTransactionIdOutput orderPatch(String id, String xConsumerTransactionId) throws ApiException {
        ApiResponse<OrderTransactionIdOutput> resp = orderPatchWithHttpInfo(id, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Unlock the order with the given id
     * 
     * @param id order Id (document number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;OrderTransactionIdOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderTransactionIdOutput> orderPatchWithHttpInfo(String id, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = orderPatchValidateBeforeCall(id, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<OrderTransactionIdOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unlock the order with the given id (asynchronously)
     * 
     * @param id order Id (document number) (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderPatchAsync(String id, String xConsumerTransactionId, final ApiCallback<OrderTransactionIdOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderPatchValidateBeforeCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderTransactionIdOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderPost
     * @param insertOrderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderPostCall(InsertOrderInput insertOrderInput, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = insertOrderInput;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderPostValidateBeforeCall(InsertOrderInput insertOrderInput, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'insertOrderInput' is set
        if (insertOrderInput == null) {
            throw new ApiException("Missing the required parameter 'insertOrderInput' when calling orderPost(Async)");
        }
        

        com.squareup.okhttp.Call call = orderPostCall(insertOrderInput, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new order containing the specified list of products into the Esprinet systems.
     * 
     * @param insertOrderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return InsertOrderOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsertOrderOutput orderPost(InsertOrderInput insertOrderInput, String xConsumerTransactionId) throws ApiException {
        ApiResponse<InsertOrderOutput> resp = orderPostWithHttpInfo(insertOrderInput, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Creates a new order containing the specified list of products into the Esprinet systems.
     * 
     * @param insertOrderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;InsertOrderOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsertOrderOutput> orderPostWithHttpInfo(InsertOrderInput insertOrderInput, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = orderPostValidateBeforeCall(insertOrderInput, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<InsertOrderOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new order containing the specified list of products into the Esprinet systems. (asynchronously)
     * 
     * @param insertOrderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderPostAsync(InsertOrderInput insertOrderInput, String xConsumerTransactionId, final ApiCallback<InsertOrderOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderPostValidateBeforeCall(insertOrderInput, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsertOrderOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderPut
     * @param id The complete order Id (type and number) (required)
     * @param modifyOrderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderPutCall(String id, ModifyOrderInput modifyOrderInput, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modifyOrderInput;

        // create path and map variables
        String localVarPath = "/orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderPutValidateBeforeCall(String id, ModifyOrderInput modifyOrderInput, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderPut(Async)");
        }
        
        // verify the required parameter 'modifyOrderInput' is set
        if (modifyOrderInput == null) {
            throw new ApiException("Missing the required parameter 'modifyOrderInput' when calling orderPut(Async)");
        }
        

        com.squareup.okhttp.Call call = orderPutCall(id, modifyOrderInput, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Modifies an already existing order into the Esprinet systems.
     * 
     * @param id The complete order Id (type and number) (required)
     * @param modifyOrderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return OrderTransactionIdOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderTransactionIdOutput orderPut(String id, ModifyOrderInput modifyOrderInput, String xConsumerTransactionId) throws ApiException {
        ApiResponse<OrderTransactionIdOutput> resp = orderPutWithHttpInfo(id, modifyOrderInput, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Modifies an already existing order into the Esprinet systems.
     * 
     * @param id The complete order Id (type and number) (required)
     * @param modifyOrderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;OrderTransactionIdOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderTransactionIdOutput> orderPutWithHttpInfo(String id, ModifyOrderInput modifyOrderInput, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = orderPutValidateBeforeCall(id, modifyOrderInput, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<OrderTransactionIdOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Modifies an already existing order into the Esprinet systems. (asynchronously)
     * 
     * @param id The complete order Id (type and number) (required)
     * @param modifyOrderInput Input object (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderPutAsync(String id, ModifyOrderInput modifyOrderInput, String xConsumerTransactionId, final ApiCallback<OrderTransactionIdOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderPutValidateBeforeCall(id, modifyOrderInput, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderTransactionIdOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for orderTransactionsGetById
     * @param id the transaction Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderTransactionsGetByIdCall(Integer id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/transactions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderTransactionsGetByIdValidateBeforeCall(Integer id, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderTransactionsGetById(Async)");
        }
        

        com.squareup.okhttp.Call call = orderTransactionsGetByIdCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Return the tracking transaction by the transaction id
     * 
     * @param id the transaction Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return OrderTransactionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderTransactionOutput orderTransactionsGetById(Integer id, String xConsumerTransactionId) throws ApiException {
        ApiResponse<OrderTransactionOutput> resp = orderTransactionsGetByIdWithHttpInfo(id, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Return the tracking transaction by the transaction id
     * 
     * @param id the transaction Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;OrderTransactionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderTransactionOutput> orderTransactionsGetByIdWithHttpInfo(Integer id, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = orderTransactionsGetByIdValidateBeforeCall(id, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<OrderTransactionOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the tracking transaction by the transaction id (asynchronously)
     * 
     * @param id the transaction Id (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderTransactionsGetByIdAsync(Integer id, String xConsumerTransactionId, final ApiCallback<OrderTransactionOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderTransactionsGetByIdValidateBeforeCall(id, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderTransactionOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ordersSearchGet
     * @param customerOrderId customer order id (optional)
     * @param fromDate from date orders (optional)
     * @param toDate to date orders (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage current Page to be display. This optional parameter if valorized must be equal or greater than 1 (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ordersSearchGetCall(String customerOrderId, OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customerOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customerOrderId", customerOrderId));
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromDate", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toDate", toDate));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (currentPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currentPage", currentPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ordersSearchGetValidateBeforeCall(String customerOrderId, OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = ordersSearchGetCall(customerOrderId, fromDate, toDate, filter, currentPage, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Obtains a list of orders, already existing into the Esprinet systems, satisfying the specified search criterias.  The search period should not exceed 30 days
     * 
     * @param customerOrderId customer order id (optional)
     * @param fromDate from date orders (optional)
     * @param toDate to date orders (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage current Page to be display. This optional parameter if valorized must be equal or greater than 1 (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return SearchOrdersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchOrdersOutput ordersSearchGet(String customerOrderId, OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId) throws ApiException {
        ApiResponse<SearchOrdersOutput> resp = ordersSearchGetWithHttpInfo(customerOrderId, fromDate, toDate, filter, currentPage, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Obtains a list of orders, already existing into the Esprinet systems, satisfying the specified search criterias.  The search period should not exceed 30 days
     * 
     * @param customerOrderId customer order id (optional)
     * @param fromDate from date orders (optional)
     * @param toDate to date orders (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage current Page to be display. This optional parameter if valorized must be equal or greater than 1 (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;SearchOrdersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchOrdersOutput> ordersSearchGetWithHttpInfo(String customerOrderId, OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = ordersSearchGetValidateBeforeCall(customerOrderId, fromDate, toDate, filter, currentPage, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<SearchOrdersOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtains a list of orders, already existing into the Esprinet systems, satisfying the specified search criterias.  The search period should not exceed 30 days (asynchronously)
     * 
     * @param customerOrderId customer order id (optional)
     * @param fromDate from date orders (optional)
     * @param toDate to date orders (optional)
     * @param filter Filter search by status (optional)
     * @param currentPage current Page to be display. This optional parameter if valorized must be equal or greater than 1 (optional)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ordersSearchGetAsync(String customerOrderId, OffsetDateTime fromDate, OffsetDateTime toDate, String filter, Integer currentPage, String xConsumerTransactionId, final ApiCallback<SearchOrdersOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ordersSearchGetValidateBeforeCall(customerOrderId, fromDate, toDate, filter, currentPage, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchOrdersOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ordersSummaryGet
     * @param fromDate from date orders (required)
     * @param toDate to date orders (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ordersSummaryGetCall(OffsetDateTime fromDate, OffsetDateTime toDate, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromDate", fromDate));
        if (toDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toDate", toDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xConsumerTransactionId != null)
        localVarHeaderParams.put("X-ConsumerTransactionId", apiClient.parameterToString(xConsumerTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ordersSummaryGetValidateBeforeCall(OffsetDateTime fromDate, OffsetDateTime toDate, String xConsumerTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling ordersSummaryGet(Async)");
        }
        
        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling ordersSummaryGet(Async)");
        }
        

        com.squareup.okhttp.Call call = ordersSummaryGetCall(fromDate, toDate, xConsumerTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Obtains a summary of orders satisfying the specified search criterias.  The search period should not exceed 30 days
     * 
     * @param fromDate from date orders (required)
     * @param toDate to date orders (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return OrdersSummaryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrdersSummaryOutput ordersSummaryGet(OffsetDateTime fromDate, OffsetDateTime toDate, String xConsumerTransactionId) throws ApiException {
        ApiResponse<OrdersSummaryOutput> resp = ordersSummaryGetWithHttpInfo(fromDate, toDate, xConsumerTransactionId);
        return resp.getData();
    }

    /**
     * Obtains a summary of orders satisfying the specified search criterias.  The search period should not exceed 30 days
     * 
     * @param fromDate from date orders (required)
     * @param toDate to date orders (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @return ApiResponse&lt;OrdersSummaryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrdersSummaryOutput> ordersSummaryGetWithHttpInfo(OffsetDateTime fromDate, OffsetDateTime toDate, String xConsumerTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = ordersSummaryGetValidateBeforeCall(fromDate, toDate, xConsumerTransactionId, null, null);
        Type localVarReturnType = new TypeToken<OrdersSummaryOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtains a summary of orders satisfying the specified search criterias.  The search period should not exceed 30 days (asynchronously)
     * 
     * @param fromDate from date orders (required)
     * @param toDate to date orders (required)
     * @param xConsumerTransactionId Identifies the transaction at the consumer/client side (Optional). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ordersSummaryGetAsync(OffsetDateTime fromDate, OffsetDateTime toDate, String xConsumerTransactionId, final ApiCallback<OrdersSummaryOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ordersSummaryGetValidateBeforeCall(fromDate, toDate, xConsumerTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrdersSummaryOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
